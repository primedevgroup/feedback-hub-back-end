generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  name           String?
  email          String      @unique
  password       String?
  created_at     DateTime    @default(now())
  googleId       String?     @map("google_id")
  FeedbackOwner  Feedback[]  @relation("FeedbackOwner")
  FeedbackTarget Feedback[]  @relation("FeedbackTarget")
  SquadUser      SquadUser[]

  @@map("users")
}

model EmailVerification {
  id        String   @id @default(uuid())
  email     String
  code      String
  expiresAt DateTime @map("expires_at")
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@map("email_verification")
}

model Squad {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime    @default(now()) @map("created_at")
  Feedback  Feedback[]
  SquadUser SquadUser[]

  @@map("squads")
}

model SquadUser {
  id        String        @id @default(uuid())
  squadId   String        @map("squad_id")
  userId    String        @map("user_id")
  role      SquadUserRole @default(MEMBER)
  createdAt DateTime      @default(now()) @map("created_at")
  squad     Squad         @relation(fields: [squadId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@index([squadId, userId])
  @@map("squad_user")
}

model Feedback {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ownerId   String   @map("owner_id")
  squadId   String   @map("squad_id")
  targetId  String   @map("target_id")
  owner     User     @relation("FeedbackOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  squad     Squad    @relation(fields: [squadId], references: [id], onDelete: Cascade)
  target    User     @relation("FeedbackTarget", fields: [targetId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

enum SquadUserRole {
  ADMIN
  MEMBER
  OWNER
}
